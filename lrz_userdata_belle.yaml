From nobody Wed Mar 29 13:52:39 2017
Content-Type: multipart/mixed; boundary="===============7945030876359599642=="
MIME-Version: 1.0

--===============7945030876359599642==
MIME-Version: 1.0
Content-Type: text/cloud-config; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename="/srv/userdata/usersshkey.yaml:cloud-config"

#cloud-config
merge_type: 'list(append)+dict(recurse_array)+str()'
write_files:
-   content: |
        #!/bin/bash
        ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ''
        UCN="none"
        if [ -f "/var/lib/cloud_name" ]; then
            UCN=`cat /var/lib/cloud_name`
        fi
        echo 'USERKEY="'`cat /root/.ssh/id_rsa.pub`'"' > /etc/condor/config.d/userkeys
        echo 'USERCLOUD="'$UCN'"' >> /etc/condor/config.d/userkeys
        echo 'STARTD_ATTRS += USERKEY USERCLOUD' >> /etc/condor/config.d/userkeys
        echo 'MASTER_ATTRS += USERKEY USERCLOUD' >> /etc/condor/config.d/userkeys
        echo 'SYSTEM_JOB_MACHINE_ATTRS += USERKEY USERCLOUD' >> /etc/condor/config.d/userkeys
        echo '' >> /etc/condor/config.d/userkeys
    owner: root:root
    path: /root/create-keys
    permissions: '0700'
-   content: |
        STARTD_CRON_JOBLIST = CRON
        STARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) MachineInfo
        STARTD_CRON_MachineInfo_PREFIX = MachineInfo_
        STARTD_CRON_MachineInfo_EXECUTABLE = /usr/local/sbin/MachineInfo
        STARTD_CRON_MachineInfo_PERIOD = 15m
        STARTD_CRON_MachineInfo_MODE = periodic
        STARTD_CRON_MachineInfo_RECONFIG = false
        STARTD_CRON_MachineInfo_KILL = true
        STARTD_CRON_MachineInfo_ARGS =
    owner: root:root
    path: /etc/condor/config.d/jdlupdate
    permissions: '0755'
-   content: |
        #!/bin/bash
        echo 'LISTJDL="'`cd /var/lib/condor/execute/; ls -c dir_*/DIRAC_*/*.jdl 2>> /dev/null | tr \\n \,`'"'
        C=`cat /proc/loadavg | tr \  \,`
        U=`cat /proc/uptime | tr \  \,`
        echo 'CPUTIMES="'$C,$U'"'
    owner: root:root
    path: /usr/local/sbin/MachineInfo
    permissions: '0755'
runcmd:
 - [ /root/create-keys ]
 - [ service, condor, start ]
--===============7945030876359599642==
MIME-Version: 1.0
Content-Type: text/cloud-config; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename="/srv/userdata/belle.yaml:cloud-config"

merge_type: 'list(append)+dict(recurse_array)+str()'

#cloud-config

write_files:
-   content: |
        # Keep grid setup out of environment for root and sysadmin.
        if [[ ! "$USER" =~ ^slot[0-9]+$ ]] ; then
            return 0
        fi

        # Workaround for condor not setting $HOME for worker sessions.
        # voms-proxy-info requires this.
        export HOME=`eval echo ~$USER`

        # Tarball base directory
        base="/cvmfs/grid.cern.ch/emi3wn-latest"
        
        # EMI_TARBALL_BASE flag to let jobs know that this is a tarball node
        # also used to locate etc/emi-version file by SAM nagios probes
        export EMI_TARBALL_BASE="${base}"
        
        # site vo/specific 
        export VO_ATLAS_SW_DIR="/cvmfs/atlas.cern.ch/repo/sw"
        export X509_CERT_DIR="/cvmfs/grid.cern.ch/etc/grid-security/certificates"
        export X509_VOMS_DIR="/cvmfs/grid.cern.ch/etc/grid-security/vomsdir"
        export VOMS_USERCONF="/cvmfs/grid.cern.ch/etc/grid-security/vomses"
        
        # experiment-specific
        export MYPROXY_SERVER="myproxy.cern.ch"
        export BDII_LIST="lcg-bdii.cern.ch:2170"
        export LCG_GFAL_INFOSYS="${BDII_LIST}"
        
        # not site specific; usually no change needed
        export GRID_ENV_LOCATION="${base}/usr/libexec"
        export -n GLITE_ENV_SET
        export GT_PROXY_MODE="old"
        
        # Add tarball locations to PATH, LD_LIBRARY_PATH, MANPATH, PERL5LIB, PYTHONPATH
        export PATH="${base}/bin:${base}/sbin:${base}/usr/bin:${base}/usr/sbin:${PATH}"
        
        v="${LD_LIBRARY_PATH}"
        export LD_LIBRARY_PATH="${base}/lib64:${base}/lib:${base}/usr/lib64:${base}/usr/lib:${base}/usr/lib64/dcap"
        if [ -n "${v}" ]; then
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${v}"
        fi
        
        v="${MANPATH}"
        export MANPATH="${base}/usr/share/man"
        if [ -n "${v}" ]; then
          export MANPATH="${MANPATH}:${v}"
        fi
        
        v="${PERL5LIB}"
        export PERL5LIB="${base}/usr/lib64/perl5/vendor_perl:${base}/usr/lib/perl5/vendor_perl"
        if [ -n "${v}" ]; then
          export PERL5LIB="${PERL5LIB}:${v}"
        fi
        
        # It's important that there is no trailing / for the PYTHONPATH variable.
        # Some sites might need to explicitly expand the tarball base if 
        # their users alter the PYTHONPATH significantly, for example:
        # $base/usr/lib64/python2.6:$base/usr/lib64/python2.6/site-package
        # See the PYTHONPATH section of the documentation for more details.
        v="$PYTHONPATH"
        export PYTHONPATH="${base}/usr/lib64/python2.6/site-packages:${base}/usr/lib/python2.6/site-packages"
        if [ -n "${v}" ]; then
          export PYTHONPATH="${PYTHONPATH}:${v}"
        fi
        
        export JAVA_HOME="${base}/usr/lib/jvm/jre-1.6.0-openjdk.x86_64"
        
        export LCG_LOCATION="${base}/usr"
        export GLITE_LOCATION="${base}/usr"
        # If this is needed try $base/opt/glite/var instead
        #export GLITE_LOCATION_VAR="/var"
        export SRM_PATH="${base}/usr/share/srm"
        export GFAL_PLUGIN_DIR="${base}/usr/lib64/gfal2-plugins/"
        export GFAL_CONFIG_DIR="${base}/etc/gfal2.d/"
        
        unset v base
    owner: root:root
    path: /etc/profile.d/grid-setup.sh
    permissions: '0644'
-   content: |
        # Run shoal client at boot to get updated list of proxy caches
        @reboot root /usr/bin/shoal-client && /usr/bin/cvmfs_config reload
    owner: root:root
    path: /etc/cron.d/shoal-client-boot
    permissions: '0644'
-   content: |
        #!/bin/bash
        PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin
    
        hostname=$(curl 169.254.169.254/latest/meta-data/public-hostname)
        IFS="\."
        hostname_array=($hostname)
        unset IFS
    
        logger -t 'make-swap' 'Creating swap file on' $hostname'.'
        disk=$(ls -l /dev/xvdc)
        logger -t 'make-swap' 'DEBUG - disk -' $disk
    
        if [ "X${hostname_array[${#hostname_array[@]}-2]}" == 'Xamazonaws' ] && [ -e /dev/xvdc ]; then
    
          mkdir /swap
          mount /dev/xvdc /swap
          dd if=/dev/zero of=/swap/swap_space bs=16777216 count=1024
          mkswap /swap/swap.1
          swapon /swap/swap.1
    
          logger -t 'make-swap' 'Free file cache.'
          echo 3 > /proc/sys/vm/drop_caches
        else
          fallocate -l 16G /mnt/.rw/swap.1 
          mkswap /mnt/.rw/swap.1
          swapon /mnt/.rw/swap.1
        fi
    
        logger -t 'make-swap' 'Done.'
    owner: root:root
    path: /usr/local/sbin/make-swap
    permissions: '0700'

-   content: |
        ALLOW_DAEMON = condor_pool@*, submit-side@matchsession
        COLLECTOR_NAME = CernVM cluster at \$(CONDOR_HOST)
        NEGOTIATOR_INTERVAL = 20
        START = TRUE
        SUSPEND = FALSE
        PREEMPT = FALSE
        KILL = FALSE
        TRUST_UID_DOMAIN = TRUE
        UPDATE_COLLECTOR_WITH_TCP = True
        COLLECTOR_SOCKET_CACHE_SIZE = 1000
    owner: root:root
    path: /etc/condor/config.d/40cernvm
    permissions: '0644'
-   content: |
        #!/bin/bash
        PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin

        rm -rf munin-reporter-light*
        wget http://vmrepo.heprc.uvic.ca/munin-reporter-light.tar.gz
        tar -xzvf munin-reporter-light.tar.gz

        yum install -y epel-release
        yum install -y munin-node
        rm -fv /etc/munin/plugins/*

        cp munin-reporter-light/if_uvic_ /usr/share/munin/plugins/

        (cd /etc/munin/plugins; ln -s /usr/share/munin/plugins/cpu)
        (cd /etc/munin/plugins; ln -s /usr/share/munin/plugins/df)
        (cd /etc/munin/plugins; ln -s /usr/share/munin/plugins/memory)

        stdout=`ifconfig | awk '/^em|^eth/ {print gensub(":",""i,"g",\$1)}'`
        IFS=$'\n'
        interfaces=($stdout)
        for (( i=0; i<=${#interfaces[@]}; i=$i+1 )); do
            if [ "X${interfaces[$i]}" != 'X' ]; then
                (cd /etc/munin/plugins; ln -s /usr/share/munin/plugins/if_uvic_ if_${interfaces[$i]})
            fi  
        done

        chkconfig redis on
        service redis start

        cp munin-reporter-light/munin-node-redis /usr/local/sbin/
        cp munin-reporter-light/munin-node-redis.conf /usr/local/etc/
        cp munin-reporter-light/munin-node-redis.cron /etc/cron.d/munin-node-redis

        cp munin-reporter-light/munin-node-reporter /usr/local/sbin/
        cp munin-reporter-light/munin-node-reporter.conf /usr/local/etc/

        cp munin-reporter-light/munin-node-reporter-light /usr/local/sbin/
        cp munin-reporter-light/munin-node-reporter-light.cron /etc/cron.d/munin-node-reporter-light
    owner: root:root
    path: /usr/local/sbin/munin-reporter-light-install
    permissions: '0700'

cvmfs:
 local:
  CVMFS_REPOSITORIES: belle.cern.ch,grid.cern.ch
  CVMFS_HTTP_PROXY: kraken01.westgrid.ca:3128
  CVMFS_CACHE_BASE: /mnt/.rw/cvmfs-cache

shoal:
    shoal_server_url: http://shoal.heprc.uvic.ca/nearest
    default_squid_proxy: http://kraken01.westgrid.ca:3128;http://cernvm-webfs.atlas-canada.ca:3128;DIRECT
    cron_shoal: '00 01,13 * * * root /usr/bin/shoal-client'

ganglia:
  globals:
    send_metadata_interval: 60
    override_hostname_bash: "/bin/hostname"
  cluster:
    name: '"belle"'
  udp_send_channel:
    host: 206.12.154.112
    port: 8660
    ttl: 2 

runcmd:
 - [ shoal-client ] 
 - echo nameserver 8.8.8.8 >> /etc/resolv.conf
 - [ mv, /etc/localtime , /etc/localtime-old ]
 - [ ln, -sf, /usr/share/zoneinfo/UTC, /etc/localtime ]
 - [ /usr/local/sbin/make-swap ]
 - [ rm, -f, /etc/condor/config.d/50cernvm ]
 - [ echo, /usr/local/sbin/munin-reporter-light-install ]

ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAsuHZK7hb5Ve0Q7FHhGd7cUjW+33ZUSkjkSgQ3TvQ5ZMQpRoLenkm/OBxP93gIFNwsdQqbGiMpusfiaJ5Vx/SUdeRX/9P0ULNxkYK4fxUIzOEXSeiUojKvxUMGQjM4fUR8CASKNYnxL65MSYIFrvuOT3Au19fRlv3napXzbvMbjYtOgWdjaZQWfvFUBVtZTASRafBMw44uf9Y/Av2gnD2OlxQ7ijq9zhda2wFLDe4LYDHIzb5NsU7YcYceSMf1dSjiQPMT+bMgvfQmqxD+M5jL+w51sFwuxQCK4UUQfsvv971ewyCHQ+kB8CzrLGfSCkHXeTvOOC0GY8FWC54B6D7RQ== mhp@heplw12.phys.UVic.CA
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0Np20Q4rFkI7E/Vi/08RHWm1i1PAdzXQ848ookdodofiIXuJBozoUgQmVfb/vtt8w7StpJ1Xkj3suXbFOyCW/iJbYPjve91o9Rxllfp0SPu6RV24nrhyCDOYO9DonAnVn4S9+aOVGXcP3+FbmfuvGCWf/QAKnpj+jo2adOO2Ynf/MhpSKMN/yY4lWOdCmAjh+cT7CbHRqFTmhKYBxa5qNR//VO2EGDtAZjSeath8JF0wxDvUBmRqmeoWhSDiYpUpk8kUpewSV23UyI/oVHHGL40wouUZKqU0ewR1gKHQhD9LmZbktXpF8S/Gxziqvsetv25KS4yCd6aFBmZ1byp+9 crlb@heplw34
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAucKrPQuzrcKDndD6hbETQr+KfkPiygCxYZH8Jjk1FX1mClEnF2+xFKZb93fbJoRsxOpKgUW21ADstwnb9x2+OGbWnQ3ii3Dz7Anh0M5UKfplrALGfip3GauuLmBeDl0jPJz7pDGSSzxUKcU9nDlO66Px6egWNaKXAExNxdVYAwO9+EFhZEHGns+/W8907dypn08Y4+MKnAN8DeNaHfwItDtzUPwTM1oUwFmatJ5rOyfYxli5oMFn6hcBEqa0Ol/I//UBDiPTjsvp4OIiW7t24plwfJhp00eKUoIhrpHGMajLYkdRiEzmethGkRQSa83dQV9hx/jYkiy8nXrCCmodiw== rsobie@macsob.phys.UVic.CA
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEA0qtnTRW99ygnBFpf+pnEfeQKR1cAC0Zs9Ent6AuFYa2RyyI524tMXUJzjV/Mk/QVniODdp1LYtl42WKcP3qRJ/oOud4Iqk71ko5VoJmHpiczrQanKMwg6GOxRQ17bLVpNDjJEsrq1rG3YUBtUCW910wm7eqAuXALGjRmtYtqscOi30vbOMyZLmfLyBDqK6bQ1Dz103B+g7eZTfZX3vk1VXBXmlcRJZU9/VCN6SvZhqNyga32BpGURXmf/OgTs/964GLLQhP8yuJe09gZg52E7ap+hvdsx9EnSqGNDdcT3XwM5+nwYzr86glnOUm+u9ridCkS+20QDiWkDueIZRsZqhTiYC5gmz4NwBveiuEDT3zRfsSFdZ8Ea+VB7abWQvZXshJbezCaLr6qhLgvWimmMCg9CN/tWf9gDTcIadOyPJvWNYnwBkcZvo++AXzX2WKpN65L144gxhjMO7ehIrTeLnbyt9Nossd1Bav4DnIlVtbYGRpsNVAbytUxwR4m+0q4v1ChphD33wkA7wuiFQhcej2hq8/zqMPAdG9H+rnwQRr5MD2791JIEfFBwyTY7k9Vrt16W4MVVhQtBJkcEF0M2Ziq++ZLWq3USDdTWAZDBsIzgaiX33bvx/x7OTYp6V7CF/+jCFRW3E4VpcQjKdsqZW3TrHuI0k+B46NkJAZVSe8= casteels@uvic.ca
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC5nCWnNvXUGFgW+1cKinQhulovYs6qjjHTv3A1dRjWMuaXfqlz1udRJfTY/aU2qY9dU0slWFW8YKMx7Qdd3lE/YJ60hu8Q85ewLhwlBN8lNBExsCmiYrP7wOfyUZZgVU0cgEVt1sh0Uh9HhB0VXUUuRNcKt3hM0IM7DbHihbFIOv0/FLmNcWaVVJwtqtyMJoFxBl4Wfpk9xnk1sjrDVaBlxnFexIvifJhW0THY68yqpOapRv0+qgp0lecQWqIKgaGDssCGmi8Yq2Z3o4dZBzOZdJiAN0WHR+UPOfcLw86N0MjwBPOhOnWDnluF9Iys+gMxXj9jkXVhQDEMI8JHIShZ7gRuTkjeJ+1CHVXvBRck4vQQz83qHRQR8DFEofqN1h2a8zLQYQ9n310lxOo1LqS0k6qubrbzRIDweEv/Id/+WihhJvgEV9cho7xvm+Xf/s5k0X0xHKlgqCDh7lN6Aabr9s504xDu/HX+D2+w60HiGtZZC76pW5slCZWHlGNKC9C0l/Toe9UOiupD6JJKSHO6SQkZncSUYYuGWic/zYAImsaThvib9zkPU8j8bckxvvTccz6rP2dS7ASXjz0JFxoM9nKlvnFjRCQLxURrW90+w5Qz+rSeIEuzVOBig+qd+mxgG5awkq8+RrCX067oDl8GFy1RMDtoQGCu23SAkE80EQ== workstation
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt/DIPLcgyqSrVQI0k4GriSadlSJwmbCMaUI7sxpYxhDXQi96Wfi65Tqal6sfltnSyRrblEVzfM8kPMGWadGiu9a4WqvgH9Tspy2BLdkLYY1U4SUR6vs9KSilmZREn3Dn+gWBWF8CNxdsy22IMpgwjsFf3f8pq+a6rYwywNx8j4ym3j+6tnbX1zRgrUIRE0zGYy0Jls6GUnfbYqPCXyF4CbjEHxaoo+alY0GslvafL1h11KtEmYMSr/hHcYEbAL0oUv9q4Xck6XbAxqjrcdp6ePSaP2SsHWQ6w0em028rnUAFdYObUh3b8IJXsv7E4mIp2TB+Zt3aAn0g2yunYXIFB seuster@heplw62
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAuHHmWyZ0pfhJnktmNQ3x1KRquDvtbXiInTLhVJUh7xIJMB19i+8dEXBqlr/ezCg35+WSS3jJ3WiMtsIITSAefuhK8UUltK7YA4c3NcbwGfyAjNhY2E0leqEo4Jit7RcejbOr7cAXQezZWIyPWr21O98KEHkCsqDlIsgMwvfqW3mT1KlYapflTUmkzbcmdU4ToabJEpWg8HgChhm0wBuW4JzafXiLe/xlNLon9Lac1oNBd++vrvjcjSTNI08baPglfyDwS24MJCq0RATZN5SW9cgc22JO92ThKmWhjeTcRbgyhTYefgFmiyAhTzKaD0KlEuueCIFD57/fKk2DTYWmSQ== tjlee@heplw68.phys.uvic.ca

--===============7945030876359599642==
MIME-Version: 1.0
Content-Type: text/cloud-config; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename="/srv/userdata/benchmark.yaml:cloud-config"

#cloud-config
merge_type: 'list(append)+dict(recurse_array)+str()'
write_files:
-   content: |
        #!/bin/bash
        export BMK_ROOTDIR=/cvmfs/atlas.cern.ch/repo/benchmarks/cern/current
        /cvmfs/atlas.cern.ch/repo/benchmarks/cern/current/cern-benchmark --benchmarks="fastBmk;whetstone" -q -o >/tmp/benchmarks.log
    owner: root:root
    path: /usr/local/sbin/HEPbm
    permissions: '0700'
-   content: |
        #!/bin/bash
        central_manager=$(cat /etc/condor/central_manager)
        defunct=$(ps -ef | grep '\[java\] <defunct>' | grep -v grep | wc -l)
        hostname=$(hostname -s)
        vmtype=$(awk '/^VMType/ {split($0,w,"\""); print w[2]}' /etc/condor/condor_config.local)
        utc=$(date +%s)
        uptime=$(awk '{print $1}' /proc/uptime)
        cores=$(grep -c ^processor /proc/cpuinfo)
        benchmarks=$(awk '/MWIPS/ {w=$1} /^Fast/ {f=$4} END{print  "fastBmk=" f ",whetstone=" w}' /tmp/benchmarks.log)
        str="central_manager=$central_manager,defunct=$defunct,host=$hostname,vmtype=$vmtype,cores=$cores,utc=$utc,uptime=$uptime,$benchmarks"
        norm=`getconf CLK_TCK`
        names=( user nice system idle iowait irq softirq steal guest guest_nice )
        total=0
        n=0
        for i in $(head -1 /proc/stat | cut -c 4-) 
        do
            t=$(expr $i / $norm)
            str="$str,${names[$n]}=$t"
            total=$(($total+$t))
            (( n++ ))
        done
        str="$str,Total=$total"
        uptime=$(awk '{print $1}' /proc/uptime)
        curl "vmrepo.heprc.uvic.ca?$str" >/dev/null 2>&1
    owner: root:root
    path: /usr/local/sbin/HEPbmTimes
    permissions: '0700'
-   content: |
        */15 * * * * root /usr/local/sbin/HEPbmTimes
    owner: root:root
    path: /etc/cron.d/HEPbmTimes
    permissions: '0644'
runcmd:
 - [ /usr/local/sbin/HEPbm ]
 - [ /usr/local/sbin/HEPbmTimes ]

--===============7945030876359599642==
MIME-Version: 1.0
Content-Type: text/cloud-config; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename="/srv/userdata/tunnel_condor_fullstart.yaml:cloud-config"

#cloud-config
merge_type: 'list(append)+dict(recurse_array)+str()'
write_files:
-   content: |
        #!/bin/bash
        # chkconfig: 345 70 30
        # description: deamon for sshuttle
        
        . /etc/init.d/functions
        
        start() {
                echo -n "Installing sshuttle: "
                cd /root
                if [ ! -d "sshuttle" ]; then
                        git clone https://github.com/sshuttle/sshuttle.git
                        cd sshuttle/
                        ./setup.py install
                fi
                pip install importlib
                echo -n "Starting sshuttle: "
                daemon "sshuttle --dns  --no-latency-control -e 'ssh -o StrictHostKeyChecking=no -o CheckHostIP=no -Y -p13231' -r sshendpoint@belletunsrv.heprc.uvic.ca 0/0 -x 10.0.0.0/8 -x 172.16.0.0/12 -x 192.168.0.0/16 -x 169.254.169.254/32 -x 127.0.0.0/8 -D"
                touch /var/lock/subsys/sshuttle
                return 0
        }
        
        stop() {
                echo -n "Shutting down sshuttle: "
                pkill -15 sshuttle ; sleep 15; pkill -9 sshuttle
                rm -f /var/lock/subsys/sshuttle
                return 0
        }
        
        case "$1" in
            start)
                start
                ;;
            stop)
                stop
                ;;
            status)
                echo status
                ;;
            restart)
                stop
                start
                ;;
            reload)
                echo relaod
                ;;
            *)
                echo "Usage: sshuttle {start|stop|status|reload|restart}"
                exit 1
                ;;
        esac
        exit $?
    owner: root:root
    path: /etc/init.d/dsshuttle
    permissions: '0700'
-   content: |
        #!/bin/bash
        CR=`condor_config_val RUN`
        touch /tmp/tunnel
        echo "in tunnel_condor_fullrestart" >> /tmp/tunnel
        if [ ! -f "$CR/master.pid" ]; then
            echo "needed to restart condor" >> /tmp/tunnel
            service condor restart
            sleep 15
        fi
        if [ -f "/var/lib/cloud_name" ] && grep -q -w chameleon /var/lib/cloud_name ; then
            
            echo "establishing tunnel" >> /tmp/tunnel
            LOOP=1
            HN=`hostname -s`
            CS=`service condor status`
            echo "$CS" >> /tmp/tunnel
            while [ $LOOP -lt 20 ] && echo "$CS" | grep -q "condor is running"
            do
                sleep 6
                CS=`service condor status`
                echo "$CS" >> /tmp/tunnel
                (( LOOP ++ ))
            done
            S=`condor_status -long -m | grep USERKEY | grep $HN | wc -l`
            echo $S >> /tmp/tunnel
            LOOP=1
            while [ $S -eq 0 -a $LOOP -lt 20 ]
            do
                sleep 30
                S=`condor_status -long -m | grep USERKEY | grep $HN | wc -l`
                echo $S >> /tmp/tunnel
                (( LOOP ++ ))
            done
            sleep 60
            chkconfig --add dsshuttle
            service dsshuttle start
        fi
        
        sed -i.bak 's/^DAEMON_LIST = MASTER$/DAEMON_LIST = MASTER, STARTD/g' /etc/condor/condor_config.local
        condor_reconfig
    owner: root:root
    path: /root/tunnel_condor_fullstart
    permissions: '0700'
runcmd:
 - [ /root/tunnel_condor_fullstart ]

--===============7945030876359599642==
MIME-Version: 1.0
Content-Type: text/ucernvm-config; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename="/srv/userdata/cernvm-data.txt:ucernvm-config"

[ucernvm-begin]
useglideinWMS=false
CVMFS_PAC_URLS=http://shoal.heprc.uvic.ca/wpad.dat
CVMFS_HTTP_PROXY='auto;http://kraken01.westgrid.ca:3128;DIRECT'
[ucernvm-end]

--===============7945030876359599642==
MIME-Version: 1.0
Content-Type: text/cloud-config; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud_conf.yaml"

#cloud-config
merge_type: 'list(append)+dict(recurse_array)+str()'
write_files:
-   content: |
        bellecs.heprc.uvic.ca
    path: /etc/condor/central_manager
-   content: |
        START=(Owner == "dirac")
        
    path: /etc/condor/condor_config.local.modifications
-   content: |
        OpenNebula
    path: /var/lib/cloud_type
-   content: |
        lrz
    path: /var/lib/cloud_name
-   content: |
        #!/bin/bash -l
        exec "$@"
    owner: root:root
    permissions: '0755'
    path: /usr/libexec/condor/jobwrapper.sh
-   content: |
        VMType = "belle-worker"
        CONDOR_HOST=bellecs.heprc.uvic.ca
        SEC_DAEMON_AUTHENTICATION =
        SEC_DAEMON_AUTHENTICATION_METHODS =
        SEC_CLIENT_AUTHENTICATION_METHODS =
        SEC_PASSWORD_FILE =
        LOG=/var/log/condor
        RUN=/var/run/condor
        SPOOL=/var/lib/condor/spool
        JAVA_BENCHMARK_TIME = 0
         
        HOSTALLOW_WRITE = $(IP_ADDRESS), $(FULL_HOSTNAME), $(CONDOR_HOST)
        ALLOW_WRITE = $(IP_ADDRESS), $(FULL_HOSTNAME), $(CONDOR_HOST)
        CCB_ADDRESS = $(CONDOR_HOST)
        CCB_HEARTBEAT_INTERVAL = 180
        TRUST_UID_DOMAIN = False
        START = TRUE
        DAEMON_LIST = MASTER
        MaxJobRetirementTime = 3600 * 24 * 2
        SHUTDOWN_GRACEFUL_TIMEOUT = 3600 * 25 * 2
        USER_JOB_WRAPPER = /usr/libexec/condor/jobwrapper.sh
        NUM_SLOTS = 1
        NUM_SLOTS_TYPE_1 = 1
        SLOT_TYPE_1 = cpus=100%
        SLOT_TYPE_1_PARTITIONABLE = True
        SLOT1_1_USER = slot01
        SLOT1_2_USER = slot02
        SLOT1_3_USER = slot03
        SLOT1_4_USER = slot04
        SLOT1_5_USER = slot05
        SLOT1_6_USER = slot06
        SLOT1_7_USER = slot07
        SLOT1_8_USER = slot08
        SLOT1_9_USER = slot09
        SLOT1_10_USER = slot10
        SLOT1_11_USER = slot11
        SLOT1_12_USER = slot12
        SLOT1_13_USER = slot13
        SLOT1_14_USER = slot14
        SLOT1_15_USER = slot15
        SLOT1_16_USER = slot16
        DEDICATED_EXECUTE_ACCOUNT_REGEXP = slot[0-9]+
        STARTER_ALLOW_RUNAS_OWNER = False
        EXECUTE = /var/lib/condor/execute
        GSI_DAEMON_DIRECTORY = /etc/grid-security
        GSI_DAEMON_CERT = /etc/grid-security/hostcert.pem
        GSI_DAEMON_KEY = /etc/grid-security/hostkey.pem
        SUSPEND = False
        CONTINUE = True
        PREEMPT = False
        KILL = False
        STARTD_ATTRS += COLLECTOR_HOST_STRING VMType
        HIGHPORT = 50000
        LOWPORT = 40000
        startd.POLLING_INTERVAL = 60
        startd.UPDATE_INTERVAL = 180
        startd.UPDATE_OFFSET = $RANDOM_INTEGER(0,180)
    owner: root:root
    permissions: '0644'
    path: /etc/condor/condor_config.local
-   content: |
        #! /bin/sh
        # chkconfig: 2345 98 10
        # description: Condor HTC computing platform
        ### BEGIN INIT INFO
        # Provides:          condor
        # Required-Start:    $network $local_fs
        # Required-Stop:
        # Should-Start:
        # Default-Start:     2 3 4 5
        # Default-Stop:      0 1 6
        # Short-Description: Manage condor daemons
        # Description: Condor HTC computing platform
        ### END INIT INFO
        EC2_METADATA=169.254.169.254
        CENTRAL_MANAGER=`cat /etc/condor/central_manager 2>/dev/null`
        START_REQUIREMENT=`cat /etc/condor/start_req_config 2>/dev/null`
        CONDOR_CONFIG=/etc/condor/condor_config
        CONDOR_CONFIG_VAL=/usr/bin/condor_config_val
        CONDOR_CONFIG_LOCAL_MODIFS=/etc/condor/condor_config.local.modifications
        IMAGE_METADATA=/.image.metadata
        PIDFILE=
        MAX_STOP_WAIT=30
        PS=
        CONDOR_LOG=
        CONDOR_SBIN=
        CONDOR_OFF=
        CONDOR_RECONFIG=
        CONDOR_MASTER=
        echon() {
            if [ "`echo -n`" = "-n" ]; then
                echo "$@""\c"
            else
                echo -n "$@"
            fi
        }
        fatal_error() {
                echo "FATAL: $1"
                exit 1
        }
        verify_executable() {
            if [ ! \( -f "$1" -o -L "$1" \) ]; then
                fatal_error "Required executable $1 does not exist."
            fi
            if [ -d "$1" ]; then
                fatal_error "Required executable $1 is a directory instead of a file."
            fi
            if [ ! -x "$1" ]; then
                fatal_error "Required executable $1 is not executable."
            fi
            return 0
        }
        verify_readable_directory() {
            if [ ! -d "$1" ]; then
                fatal_error "Required directory $1 does not exist, or is not a directory."
            fi
            if [ ! -r "$1" ]; then
                fatal_error "Required executable $1 is not readable."
            fi
            return 0
        }
        get_condor_config_val() {
            TMPVAL=`"$CONDOR_CONFIG_VAL" $1`
            if [ "$TMPVAL" = "" ]; then
                fatal_error "Unable to locate $1 in $CONDOR_CONFIG"
            fi
            echo "$TMPVAL"
        }
        init_condor_sbin() {
            if [ "$CONDOR_SBIN" != "" ]; then
                return 0;
            fi
            CONDOR_SBIN=`get_condor_config_val SBIN`
            verify_readable_directory "$CONDOR_SBIN"
            return 0;
        }
        init_condor_run() {
            if [ "$CONDOR_RUN" != "" ]; then
                return 0
            fi
            CONDOR_RUN=`get_condor_config_val RUN`
            verify_readable_directory "$CONDOR_RUN"
            return 0
        }
        init_condor_master() {
            if [ "$CONDOR_MASTER" = "" ]; then
                CONDOR_MASTER=`get_condor_config_val MASTER`
            fi
            verify_executable "$CONDOR_MASTER"
            return 0
        }
        init_condor_reconfig() {
            if [ "$CONDOR_RECONFIG" = "" ]; then
                init_condor_sbin
                CONDOR_RECONFIG="$CONDOR_SBIN/condor_reconfig"
            fi
            verify_executable "$CONDOR_RECONFIG"
            return 0
        }
        init_condor_off() {
            if [ "$CONDOR_OFF" = "" ]; then
                init_condor_sbin
                CONDOR_OFF="$CONDOR_SBIN/condor_off"
            fi
            verify_executable "$CONDOR_OFF"
            return 0
        }
        init_ps() {
            if [ "$PS" != "" ]; then
                return 0;
            fi
            PS="/bin/ps -efwwww"
            $PS > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                return 0
            fi
            PS="/bin/ps auwx"
            $PS > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                return 0
            fi
            PS="/bin/ps -ef"
            $PS > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                return 0
            fi
            fatal_error "Could not determine how to call ps. Edit this script to explicitly set PS as documented there."
        }
        condor_pid() {
            if [ ! -f "$PIDFILE" ]; then return 1; fi 
            if [ ! -r "$PIDFILE" ]; then return 1; fi 
            if [ ! -s "$PIDFILE" ]; then return 1; fi 
            masterpid=`cat "$PIDFILE"`
            if [ "$masterpid" = "" ]; then return 1; fi 
                init_ps
                foundpid=`$PS | grep condor_master | grep -v grep | awk '{print $2}' | grep "^$masterpid$"`
            if [ "$foundpid" = "" ]; then return 1; fi 
            echo "$masterpid"
            return 0
        }
        wait_for_exit() {
            max_wait=$2
            sleep_time=$1
            stop_duration=0
            while [ "`condor_pid`" != "" -a $stop_duration -lt $max_wait ]; do
                sleep $sleep_time
                stop_duration=`expr $stop_duration + $sleep_time`
            done
            if [ "`condor_pid`" = "" ]; then
                return 0
            else
                return 1
            fi
        }
        replace_or_append() {
            replace_this=$1
            with_this=$2
            on_this_file=$3
            grep -e "^$replace_this[ =]" $on_this_file >/dev/null 2>&1
            REPLACE=$?
            if [ $REPLACE -eq 0 ]; then
                sed -i "s/^$replace_this[ =].*/$with_this/" $on_this_file
            else
                echo $with_this >> $on_this_file
            fi
        }
        set_central_manager() {
            condor_host=$1
            if [ "xxx" = "xxx${condor_host}" ]; then
                echo "CENTRAL_MANAGER is undefined. Check /etc/condor/central_manager" >&1
                exit 1
            fi
            local_file=`get_condor_config_val LOCAL_CONFIG_FILE`
            replace_or_append "CONDOR_HOST" "CONDOR_HOST=$condor_host" $local_file
        }
        update_condor_local_config() {
            if [ -f $CONDOR_CONFIG_LOCAL_MODIFS ]; then
            local_file=`get_condor_config_val LOCAL_CONFIG_FILE`
            echo "Applying modifications to ${local_file} ..."
            while read LINE
            do
                variable=`echo ${LINE} | perl -pe 's/(\w*?) \s*? = \s* (.*)/\1/x'`
                value=`echo ${LINE} | perl -pe 's/(\w*?) \s*? = \s* (.*)/\2/x'`
                replace_or_append "${variable}" "${variable}=${value}" $local_file
            done < $CONDOR_CONFIG_LOCAL_MODIFS
            fi
        }
        setup_ccb() {
            LOCAL_ADDRESS=`/sbin/ifconfig eth0 | grep "inet addr" | awk '{print $2}' | sed s/addr://`
            EXTHOSTNAME=`curl -s http://$EC2_METADATA/latest/meta-data/public-hostname`
            echo $LOCAL_ADDRESS $EXTHOSTNAME "# Added for Condor CCB" >> /etc/hosts
        }
        setup_ccb_azure() {
            LOCAL_ADDRESS=`/sbin/ifconfig eth0 | grep "inet addr" | awk '{print $2}' | sed s/addr://`
            EXTHOSTNAME=`hostname`
            echo $LOCAL_ADDRESS $EXTHOSTNAME "# Added for Condor CCB" >> /etc/hosts
        }
        setup_vmtype() {
            IMAGE_META_FILE=$1
            if [ -f $IMAGE_META_FILE ]; then
                VMTYPE=`cat $IMAGE_META_FILE | awk -F: '/^name:/ { print $2 }' | sed  's/[ \t]* //'`
                if [ "xxx" != "xxx${VMTYPE}" ]; then
                    local_file=`get_condor_config_val LOCAL_CONFIG_FILE`
                    replace_or_append "VMType" "VMType= \"$VMTYPE\"" $local_file
                fi
                fi
        }
        setup_on_ec2() {
            local_file=`get_condor_config_val LOCAL_CONFIG_FILE`
            public_ip=`curl -m 10 -s http://$EC2_METADATA/latest/meta-data/public-ipv4`
            test $public_ip != "0.0.0.0" > /dev/null 2>&1
            HAS_PUBLIC_IP=$?
            curl -m 10 -s http://$EC2_METADATA/ >/dev/null 2>&1
            IS_EC2=$?
            if [ $IS_EC2 -eq 0 ] ; then
                if [ $HAS_PUBLIC_IP -eq 0 ] ; then
                    EXTHOSTNAME=`curl -s http://$EC2_METADATA/latest/meta-data/public-hostname`
                    VALID_HOST=$?
                    if [ $VALID_HOST -eq 0 ] && [[ $EXTHOSTNAME != ??xml* ]] && [[ $EXTHOSTNAME != ?html* ]] ; then
                        hostname $EXTHOSTNAME
                        private_network_name=amazon-ec2-`curl -s http://$EC2_METADATA/latest/meta-data/placement/availability-zone`
                        replace_or_append "PRIVATE_NETWORK_NAME" "PRIVATE_NETWORK_NAME=$private_network_name" $local_file
                        tcp_forwarding_host=`curl -s http://$EC2_METADATA/latest/meta-data/public-ipv4`
                        replace_or_append "TCP_FORWARDING_HOST" "TCP_FORWARDING_HOST=$tcp_forwarding_host" $local_file
                        private_network_interface=`curl -s http://$EC2_METADATA/latest/meta-data/local-ipv4`
                        replace_or_append "PRIVATE_NETWORK_INTERFACE" "PRIVATE_NETWORK_INTERFACE=$private_network_interface" $local_file
                    fi
                else
                    EXTHOSTNAME=`curl -s http://$EC2_METADATA/latest/meta-data/public-hostname`
                    VALID_ID=$?
                    if [ $VALID_ID -eq 0 ] && [[ $EXTHOSTNAME != ??xml* ]] && [[ $EXTHOSTNAME != ?html* ]] ; then
                        hostname $EXTHOSTNAME
                        private_network_interface=`curl -s http://$EC2_METADATA/latest/meta-data/local-ipv4`
                        replace_or_append "PRIVATE_NETWORK_INTERFACE" "PRIVATE_NETWORK_INTERFACE=$private_network_interface" $local_file
                    fi
                fi
            fi
        }
        setup_on_gce() {
            local_file=`get_condor_config_val LOCAL_CONFIG_FILE`
            public_ip=`curl -m 10 -s http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip -H "Metadata-Flavor: Google"`
            test $public_ip != "0.0.0.0" > /dev/null 2>&1
            HAS_PUBLIC_IP=$?
            curl -m 10 -s http://metadata/ >/dev/null 2>&1
            IS_EC2=$?
            if [ $IS_EC2 -eq 0 ] ; then
                if [ $HAS_PUBLIC_IP -eq 0 ] ; then
                    EXTHOSTNAME=`curl -s http://metadata/computeMetadata/v1/instance/hostname -H "Metadata-Flavor: Google"`
                    VALID_HOST=$?
                    if [ $VALID_HOST -eq 0 ] && [[ $EXTHOSTNAME != ??xml* ]] && [[ $EXTHOSTNAME != ?html* ]] ; then
                        hostname $EXTHOSTNAME
                        tcp_forwarding_host=`curl -s http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip -H "Metadata-Flavor: Google"`
                        replace_or_append "TCP_FORWARDING_HOST" "TCP_FORWARDING_HOST=$tcp_forwarding_host" $local_file
                        private_network_interface=`curl -s http://metadata/computeMetadata/v1/instance/network-interfaces/0/ip -H "Metadata-Flavor: Google"`
                        replace_or_append "PRIVATE_NETWORK_INTERFACE" "PRIVATE_NETWORK_INTERFACE=$private_network_interface" $local_file
                    fi
                else
                    EXTHOSTNAME=`curl -s http://metadata/computeMetadata/v1/instance/hostname -H "Metadata-Flavor: Google"`
                    VALID_ID=$?
                    if [ $VALID_ID -eq 0 ] && [[ $EXTHOSTNAME != ??xml* ]] && [[ $EXTHOSTNAME != ?html* ]] ; then
                        hostname $EXTHOSTNAME
                        private_network_interface=`curl -s http://metadata/computeMetadata/v1/instance/network-interfaces/0/ip -H "Metadata-Flavor: Google"`
                        replace_or_append "PRIVATE_NETWORK_INTERFACE" "PRIVATE_NETWORK_INTERFACE=$private_network_interface" $local_file
                    fi
                fi
            fi
        }
        setup_on_azure() {
            local_file=`get_condor_config_val LOCAL_CONFIG_FILE`
            tcp_forwarding_host=`grep PublicAddress /var/lib/waagent/SharedConfig.xml | awk '{print $7}' | awk -F ':' '{print $1}' | awk -F '"' '{print $2}'`
            replace_or_append "TCP_FORWARDING_HOST" "TCP_FORWARDING_HOST=$tcp_forwarding_host" $local_file
            private_network_interface=`/sbin/ifconfig eth0 | grep "inet addr" | awk '{print $2}' | sed s/addr://`
            replace_or_append "PRIVATE_NETWORK_INTERFACE" "PRIVATE_NETWORK_INTERFACE=$private_network_interface" $local_file
        }
        set_hostkey_permissions () {
            HOST_KEY=`get_condor_config_val GSI_DAEMON_KEY`
            if [ -f $HOST_KEY ]; then
            chmod 400 $HOST_KEY
            else
            echo "Grid certificate host key not found. $HOST_KEY"
            fi
        }
        cleanup_ccb () {
            sed -i '/# Added for Condor CCB/d' /etc/hosts
        }
        verify_execute () {
            execute_dir=`get_condor_config_val EXECUTE`
            if [ ! -d $execute_dir ]; then
                mkdir -p $execute_dir
            fi
            execute_owner=`stat -c %U $execute_dir`
            if [ "$execute_owner" != "condor" ]; then
                chown condor:condor $execute_dir
            fi
            execute_rights=`stat -c %a $execute_dir`
            if [ $execute_rights -ne 755 ]; then
                chmod 755 $execute_dir
            fi
        }
        start() {
            set_hostkey_permissions
            if [ -f "/var/lib/cloud_type" ]; then
                cloud_type=`cat /var/lib/cloud_type`
                if [ "$cloud_type" = "Azure" ]; then
                    setup_on_azure
                    setup_ccb_azure
                else
                    setup_on_ec2
                    setup_ccb
                fi
            fi
            set_central_manager $CENTRAL_MANAGER
            setup_vmtype $IMAGE_METADATA
            update_condor_local_config
            verify_execute
            init_condor_master
            echon "Starting up Condor..."
            "$CONDOR_MASTER" -pidfile "$PIDFILE"
            RETVAL=$?
            [ $RETVAL -eq 0 ] && touch /var/lock/subsys/condor;
            echo "done."
            return 0
        }
        xstop() {
            cleanup_ccb
            echon "Shutting down Condor (fast-shutdown mode)..."
            master_pid=`condor_pid`
            if [ "$master_pid" != "" ]; then
                echon "using kill..."
                kill -QUIT "$master_pid"
            else
                init_condor_off
                echon "using condor_off..."
                "$CONDOR_OFF" -fast -master | grep -v 'Sent "Kill-Daemon-Fast" command'
                if [ $? -gt 0 ]; then
                    echo "Failed to stop Condor (non-0 exit)."
                    return 1
                fi
            fi
            wait_for_exit 1 $MAX_STOP_WAIT
            if [ $? -gt 0 ]; then
                echo "Failed to stop Condor (timed out)."
                return 1
            fi
            if [ -f "$PIDFILE" ]; then
                rm "$PIDFILE"
            fi
            echo "done."
            rm /var/lock/subsys/condor
            return 0
        }
        reload() {
            init_condor_reconfig
            echon "Reloading Condor configuration..."
            "$CONDOR_RECONFIG" | grep -v 'Sent "Reconfig" command to local master'
            echo "done."
            return 0
        }
        status() {
            master_pid=`condor_pid`
            if [ "$master_pid" != "" ]; then
                echo "Condor is running (pid $master_pid)"
                return 0
            else
                echo "Condor is not running"
                return 3;
            fi
        }
        INIT_COMMAND=$1
        verify_executable "$CONDOR_CONFIG_VAL"
        if [ "$CONDOR_CONFIG" != "" ]; then
            export CONDOR_CONFIG
        fi
        if [ "$PIDFILE" = "" ]; then
            init_condor_run
            PIDFILE="$CONDOR_RUN/master.pid"
        fi
        case $INIT_COMMAND in
        'start')
            start
            ;;
        'stop')
            xstop
            ;;
        'restart')
            xstop
            start
            ;;
        'try-restart')
            if [ "`condor_pid`" = "" ]; then exit 0; fi 
            xstop
            start
            ;;
        'reload')
            reload
            ;;
        'force-reload')
            reload
            ;;
        'status')
            status
            ;;
        *)
            echo "Usage: $0 {start|stop|restart|try-restart|reload|force-reload|status}"
            ;;
        esac
    owner: root:root
    permissions: '0755'
    path: /etc/init.d/condor
groups:
  - condor: [slot01,slot02,slot03,slot04,slot05,slot06,slot07,slot08,slot09,slot10,slot11,slot12,slot13,slot14,slot15,slot16]
users:
  - name: slot01
    groups: condor
    shell: /sbin/nologin
  - name: slot02
    groups: condor
    shell: /sbin/nologin
  - name: slot03
    groups: condor
    shell: /sbin/nologin
  - name: slot04
    groups: condor
    shell: /sbin/nologin
  - name: slot05
    groups: condor
    shell: /sbin/nologin
  - name: slot06
    groups: condor
    shell: /sbin/nologin
  - name: slot07
    groups: condor
    shell: /sbin/nologin
  - name: slot08
    groups: condor
    shell: /sbin/nologin
  - name: slot09
    groups: condor
    shell: /sbin/nologin
  - name: slot10
    groups: condor
    shell: /sbin/nologin
  - name: slot11
    groups: condor
    shell: /sbin/nologin
  - name: slot12
    groups: condor
    shell: /sbin/nologin
  - name: slot13
    groups: condor
    shell: /sbin/nologin
  - name: slot14
    groups: condor
    shell: /sbin/nologin
  - name: slot15
    groups: condor
    shell: /sbin/nologin
  - name: slot16
    groups: condor
    shell: /sbin/nologin
runcmd:
 - [ mv, /etc/localtime , /etc/localtime-old ]
 - [ ln, -sf, /usr/share/zoneinfo/UTC, /etc/localtime ]
 - [ service, condor, start ]

--===============7945030876359599642==--
